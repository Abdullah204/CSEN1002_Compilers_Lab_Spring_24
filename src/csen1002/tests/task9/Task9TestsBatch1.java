package csen1002.tests.task9;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task9.Task9Lexer;
import csen1002.main.task9.Task9Parser;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task9TestsBatch1 {
	
    /**
     * Parses a provided string using Task 9's grammar
     * and gets the value of the attribute "check" of the variable "s"
     *
     * @param input a string to parse
     * @return the value of the attribute "check" of the variable "s"
     */
    public static int sCheckValue(String input) {
        Task9Lexer lexer = new Task9Lexer(CharStreams.fromString(input));
        Task9Parser parser = new Task9Parser(new CommonTokenStream(lexer));
        return parser.s().check;
    }

	@Test
	public void testString1() {
		assertEquals(1, sCheckValue("10000#01000#00100#00010#00001#00000#00000#00000#00000#00000#00000#00000#00000#00000#00000#00000#00000#00000"));
	}

	@Test
	public void testString2() {
	    assertEquals(0, sCheckValue("010110001101#100000001111#100000111110#011111111100#111000111011#100000110101#101100010010#001000001010#111001010010#000111101000#001110011010#010111000000"));
	}

	@Test
	public void testString3() {
		assertEquals(0, sCheckValue("10010000101001#00111100011001#10011111110101#10110010101001#00101110000101#01010101111001#00100100110001#11111111000111#01100011000001#11111100000100#00001100111110#01011110000001#00100101110110#00001010111001"));
	}

	@Test
	public void testString4() {
		assertEquals(0, sCheckValue("00011110110100010#11101111101010100#11111010001010010#10010100100110110#00100111010100011#00001000001011000#01001110111001101#00101010001110011#10111111001100010#11001000111110000#10011010110111001#11100000010101010#01110000001100000#10000001111010111#10001011010000010#00000011111001000#10110110101110111"));
	}

	@Test
	public void testString5() {
		assertEquals(0, sCheckValue("0110111010010011#0001000101110010#1000100010110100#0010100101010111#1110110111100011#1010101000100010#0001000010000000#0000111000000010#1111111110101110#0100110000010111#0001011011000000#0011011000001101#1100001010101100#1000000110010110#0001111101000101#0001101101010011"));
	}

	@Test
	public void testString6() {
		assertEquals(0, sCheckValue("1101110110010110#0010010011101111#1101110111000110#1100000011011001#1000000000000110#1011111110100101#0011001010101011#0100100111010000#0010100011010011#1101011010101001#0100101100101110#1111111000111110#0100110011100001#1010101111000011#1001000000011101#0011011100101100"));
	}

	@Test
	public void testString7() {
		assertEquals(0, sCheckValue("001001000110110011#100001101111001101#001011111101100011#000011001000011111#001010011000111110#111000001011001000#101111011111001100#011110001011010001#010010101110010111#011100010011100110#000001000000101001#000100100010011011#111001111011101011#111100011111010101#000010111111100100#011100100000000100#011000100110100100#111101111101101101"));
	}

	@Test
	public void testString8() {
		assertEquals(0, sCheckValue("000010011110010#101111101110110#110111101011110#100000110011000#001001110001111#011100000111010#001011000001011#001111101011111#111000000110101#111111110001001#110001010101000#000110100111111#011010000011100#110000101101101#110111000100010"));
	}

	@Test
	public void testString9() {
		assertEquals(1, sCheckValue("100000000000#010000000000#001000000000#000100000000#000010000000#000001000000#000000100000#000000010000#000000001000#000000000100#000000000010#000000000001"));
	}

	@Test
	public void testString10() {
		assertEquals(0, sCheckValue("100000000000000000000000#010000000000000000000#00100000000000000000000000#0001000000000000000000000000#0000100000000000000000000000#0000010000000000#00000010000000000#00000001000000000000#00000000100000000000000000#000000000100000000000#0000000000100000000"));
	}

}
