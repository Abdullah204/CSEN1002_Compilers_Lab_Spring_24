package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch4 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#a;n;p#0,a,0;0,a,1;0,a,2;0,a,3;0,a,4;0,a,6;0,n,0;0,n,2;0,n,5;0,n,6;0,n,7;0,p,0;0,p,1;0,p,2;0,p,3;0,p,4;0,p,5;0,p,6;1,a,0;1,a,3;1,a,4;1,a,5;1,e,6;1,e,7;1,n,0;1,n,1;1,n,2;1,n,3;1,n,4;1,n,5;1,p,0;1,p,2;1,p,3;1,p,4;1,p,6;2,a,1;2,a,2;2,a,3;2,a,4;2,a,5;2,a,6;2,a,7;2,e,1;2,e,5;2,n,0;2,n,1;2,n,3;2,n,4;2,n,6;2,n,7;2,p,0;2,p,2;2,p,3;2,p,6;3,a,0;3,a,1;3,a,2;3,a,3;3,a,4;3,a,6;3,a,7;3,e,5;3,e,7;3,n,0;3,n,1;3,n,4;3,n,5;3,n,6;3,p,0;3,p,1;3,p,3;3,p,4;3,p,5;3,p,6;3,p,7;4,a,0;4,a,1;4,a,2;4,a,4;4,a,5;4,a,6;4,n,0;4,n,2;4,n,4;4,n,6;4,n,7;4,p,3;4,p,5;4,p,6;4,p,7;5,a,0;5,a,1;5,a,3;5,a,4;5,a,5;5,a,7;5,n,0;5,n,1;5,n,2;5,n,3;5,n,4;5,n,5;5,n,7;5,p,0;5,p,1;5,p,2;5,p,3;5,p,6;6,a,0;6,a,1;6,a,2;6,a,5;6,a,6;6,a,7;6,e,3;6,e,4;6,e,7;6,n,0;6,n,1;6,n,3;6,n,4;6,n,5;6,n,6;6,n,7;6,p,1;6,p,3;6,p,5;6,p,6;6,p,7;7,a,0;7,a,2;7,a,3;7,a,4;7,a,6;7,e,1;7,e,3;7,n,0;7,n,1;7,n,2;7,n,3;7,n,5;7,n,6;7,p,0;7,p,1;7,p,2;7,p,3;7,p,4;7,p,7#3#0;2;4;7");
		assertEquals("0/1/2/3/4/5/6/7;1/3/4/5/6/7#a;n;p#0/1/2/3/4/5/6/7,a,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,n,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,p,0/1/2/3/4/5/6/7;1/3/4/5/6/7,a,0/1/2/3/4/5/6/7;1/3/4/5/6/7,n,0/1/2/3/4/5/6/7;1/3/4/5/6/7,p,0/1/2/3/4/5/6/7#1/3/4/5/6/7#0/1/2/3/4/5/6/7;1/3/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#a;g#0,a,0;0,a,1;0,a,6;0,a,8;0,a,9;0,a,10;0,g,0;0,g,1;0,g,5;0,g,8;0,g,9;0,g,11;1,a,2;1,a,4;1,a,7;1,a,9;1,g,0;1,g,1;1,g,4;1,g,7;1,g,8;1,g,9;2,a,0;2,a,1;2,a,2;2,a,5;2,a,6;2,a,8;2,a,10;2,g,0;2,g,2;2,g,3;2,g,4;2,g,5;2,g,6;3,a,2;3,a,4;3,a,10;3,a,11;3,g,2;3,g,3;3,g,4;3,g,5;3,g,10;4,a,2;4,a,5;4,a,7;4,a,8;4,g,0;4,g,1;4,g,7;4,g,8;4,g,10;5,a,0;5,a,2;5,a,5;5,a,6;5,a,7;5,a,10;5,g,2;5,g,3;5,g,4;5,g,8;5,g,10;5,g,11;6,a,0;6,a,1;6,a,4;6,a,5;6,a,6;6,g,0;6,g,2;6,g,6;6,g,7;6,g,9;6,g,10;6,g,11;7,a,2;7,a,4;7,a,5;7,a,11;7,g,1;7,g,2;7,g,3;7,g,6;7,g,8;7,g,10;7,g,11;8,a,1;8,a,6;8,a,7;8,a,8;8,a,9;8,g,1;8,g,4;8,g,5;8,g,6;8,g,8;8,g,9;8,g,10;9,a,0;9,a,1;9,a,2;9,a,4;9,a,8;9,a,10;9,g,0;9,g,2;9,g,7;9,g,11;10,a,2;10,a,3;10,a,5;10,a,6;10,a,11;10,g,0;10,g,2;10,g,4;10,g,6;10,g,9;10,g,10;10,g,11;11,a,0;11,a,1;11,a,2;11,a,5;11,a,7;11,a,8;11,g,1;11,g,4;11,g,9;11,g,11#7#1;5;8;9");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/6/7/8/10;1/2/3/6/8/10/11;2/4/5/11;7#a;g#0/1/2/3/4/5/6/7/8/9/10/11,a,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,g,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/6/7/8/10,a,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/6/7/8/10,g,0/1/2/3/4/5/6/7/8/9/10/11;1/2/3/6/8/10/11,a,0/1/2/3/4/5/6/7/8/9/10/11;1/2/3/6/8/10/11,g,0/1/2/3/4/5/6/7/8/9/10/11;2/4/5/11,a,0/1/2/5/6/7/8/10;2/4/5/11,g,0/1/2/3/4/5/6/7/8/9/10/11;7,a,2/4/5/11;7,g,1/2/3/6/8/10/11#7#0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/5/6/7/8/10;1/2/3/6/8/10/11;2/4/5/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#m;n#0,m,1;0,m,2;0,m,3;0,m,4;0,m,6;0,n,2;0,n,4;0,n,5;0,n,7;1,e,1;1,m,0;1,m,1;1,m,3;1,m,4;1,m,5;1,m,6;1,m,7;1,n,4;1,n,5;1,n,6;1,n,7;2,m,0;2,m,1;2,m,2;2,m,3;2,m,5;2,n,2;2,n,5;2,n,6;2,n,7;3,m,0;3,m,2;3,m,4;3,m,5;3,m,6;3,m,7;3,n,0;3,n,4;3,n,5;3,n,6;3,n,7;4,e,4;4,m,0;4,m,1;4,m,2;4,m,5;4,m,7;4,n,0;4,n,1;4,n,5;4,n,6;4,n,7;5,e,5;5,m,0;5,m,2;5,m,3;5,m,5;5,m,6;5,m,7;5,n,0;5,n,1;5,n,4;5,n,6;6,e,6;6,m,2;6,m,3;6,m,4;6,m,5;6,m,6;6,m,7;6,n,1;6,n,2;6,n,4;6,n,6;7,e,7;7,m,1;7,m,2;7,m,3;7,m,6;7,m,7;7,n,0;7,n,1;7,n,2;7,n,3;7,n,4;7,n,5;7,n,7#7#1;2");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;1/2/3/6/7;7#m;n#0/1/2/3/4/5/6/7,m,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,n,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,m,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,n,0/1/2/3/4/5/6/7;1/2/3/6/7,m,0/1/2/3/4/5/6/7;1/2/3/6/7,n,0/1/2/3/4/5/6/7;7,m,1/2/3/6/7;7,n,0/1/2/3/4/5/7#7#0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;1/2/3/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#b;w#0,e,1;1,w,2;2,e,3;3,e,0;3,e,5;4,e,0;4,e,5;5,e,4;5,e,7;6,e,4;6,e,7;7,b,8#6#8");
		assertEquals("-1;0/1/2/3/4/5/7;0/1/4/5/6/7;8#b;w#-1,b,-1;-1,w,-1;0/1/2/3/4/5/7,b,8;0/1/2/3/4/5/7,w,0/1/2/3/4/5/7;0/1/4/5/6/7,b,8;0/1/4/5/6/7,w,0/1/2/3/4/5/7;8,b,-1;8,w,-1#0/1/4/5/6/7#8", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5#j;l;m;p;x#0,l,1;1,j,2;2,p,3;3,x,4;4,m,5#0#5");
		assertEquals("-1;0;1;2;3;4;5#j;l;m;p;x#-1,j,-1;-1,l,-1;-1,m,-1;-1,p,-1;-1,x,-1;0,j,-1;0,l,1;0,m,-1;0,p,-1;0,x,-1;1,j,2;1,l,-1;1,m,-1;1,p,-1;1,x,-1;2,j,-1;2,l,-1;2,m,-1;2,p,3;2,x,-1;3,j,-1;3,l,-1;3,m,-1;3,p,-1;3,x,4;4,j,-1;4,l,-1;4,m,5;4,p,-1;4,x,-1;5,j,-1;5,l,-1;5,m,-1;5,p,-1;5,x,-1#0#5", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#g;j;n#0,g,0;0,g,2;0,g,5;0,g,6;0,g,7;0,j,2;0,j,3;0,j,5;0,j,7;0,n,3;0,n,4;0,n,5;0,n,6;1,g,0;1,g,1;1,g,3;1,g,4;1,g,5;1,g,7;1,j,0;1,j,1;1,j,2;1,j,3;1,j,4;1,j,5;1,j,6;1,n,4;1,n,5;1,n,6;1,n,7;2,g,1;2,g,3;2,g,4;2,g,5;2,g,6;2,g,7;2,j,0;2,j,1;2,j,2;2,j,3;2,j,4;2,j,5;2,j,6;2,n,0;2,n,1;2,n,2;2,n,3;2,n,5;2,n,6;2,n,7;3,g,0;3,g,1;3,g,2;3,g,3;3,g,4;3,g,6;3,g,7;3,j,1;3,j,3;3,j,4;3,j,7;3,n,0;3,n,1;3,n,2;3,n,4;3,n,6;3,n,7;4,g,0;4,g,1;4,g,2;4,g,4;4,g,5;4,g,6;4,g,7;4,j,0;4,j,3;4,j,4;4,j,5;4,j,6;4,j,7;4,n,0;4,n,1;4,n,3;4,n,4;4,n,5;4,n,7;5,g,1;5,g,3;5,g,4;5,g,5;5,g,6;5,g,7;5,j,1;5,j,2;5,j,3;5,j,4;5,j,6;5,j,7;5,n,0;5,n,3;5,n,6;5,n,7;6,g,0;6,g,1;6,g,3;6,g,6;6,j,0;6,j,1;6,j,4;6,j,5;6,j,7;6,n,0;6,n,2;6,n,3;6,n,4;6,n,6;6,n,7;7,g,0;7,g,1;7,g,2;7,g,3;7,g,4;7,g,6;7,g,7;7,j,0;7,j,2;7,j,3;7,j,4;7,j,5;7,n,0;7,n,2;7,n,3;7,n,4;7,n,5#0#2;3;4;6;7");
		assertEquals("0;0/1/2/3/4/5/6/7;0/2/5/6/7;2/3/5/7;3/4/5/6#g;j;n#0,g,0/2/5/6/7;0,j,2/3/5/7;0,n,3/4/5/6;0/1/2/3/4/5/6/7,g,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,j,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,n,0/1/2/3/4/5/6/7;0/2/5/6/7,g,0/1/2/3/4/5/6/7;0/2/5/6/7,j,0/1/2/3/4/5/6/7;0/2/5/6/7,n,0/1/2/3/4/5/6/7;2/3/5/7,g,0/1/2/3/4/5/6/7;2/3/5/7,j,0/1/2/3/4/5/6/7;2/3/5/7,n,0/1/2/3/4/5/6/7;3/4/5/6,g,0/1/2/3/4/5/6/7;3/4/5/6,j,0/1/2/3/4/5/6/7;3/4/5/6,n,0/1/2/3/4/5/6/7#0#0/1/2/3/4/5/6/7;0/2/5/6/7;2/3/5/7;3/4/5/6", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#d;o;p;r#0,d,0;0,d,1;0,d,2;0,d,3;0,d,4;0,d,5;0,d,8;0,o,2;0,o,4;0,o,7;0,o,8;0,o,9;0,p,1;0,p,3;0,p,4;0,p,5;0,p,6;0,p,8;0,r,1;0,r,4;0,r,5;0,r,6;0,r,7;0,r,9;1,d,0;1,d,3;1,d,6;1,d,9;1,e,1;1,e,2;1,o,0;1,o,1;1,o,2;1,o,3;1,o,5;1,o,8;1,p,0;1,p,1;1,p,2;1,p,3;1,p,4;1,p,5;1,p,8;1,r,1;1,r,2;1,r,4;1,r,8;1,r,9;2,d,0;2,d,2;2,d,3;2,d,4;2,d,9;2,e,6;2,o,1;2,o,3;2,o,5;2,o,8;2,p,0;2,p,3;2,p,4;2,p,5;2,p,6;2,p,8;2,r,1;2,r,3;2,r,4;2,r,5;2,r,6;2,r,7;2,r,9;3,d,0;3,d,1;3,d,2;3,d,3;3,d,5;3,d,7;3,d,8;3,o,1;3,o,2;3,o,7;3,o,9;3,p,1;3,p,2;3,p,4;3,p,5;3,p,6;3,p,7;3,p,9;3,r,1;3,r,4;3,r,6;3,r,7;3,r,8;4,d,3;4,d,4;4,d,5;4,d,6;4,d,9;4,e,9;4,o,1;4,o,2;4,o,3;4,o,4;4,o,5;4,o,6;4,o,7;4,p,1;4,p,2;4,p,4;4,p,5;4,p,8;4,p,9;4,r,3;4,r,4;4,r,5;4,r,6;4,r,8;5,d,2;5,d,3;5,d,4;5,d,6;5,d,8;5,d,9;5,e,2;5,o,1;5,o,2;5,o,4;5,o,6;5,o,7;5,o,8;5,o,9;5,p,1;5,p,2;5,p,4;5,p,6;5,p,7;5,p,9;5,r,0;5,r,1;5,r,6;5,r,8;5,r,9;6,d,1;6,d,2;6,d,3;6,d,5;6,d,6;6,d,9;6,e,1;6,o,1;6,o,4;6,o,8;6,o,9;6,p,0;6,p,1;6,p,2;6,p,3;6,p,4;6,p,7;6,p,8;6,r,3;6,r,4;6,r,7;6,r,8;6,r,9;7,d,0;7,d,1;7,d,3;7,d,4;7,d,6;7,d,7;7,d,8;7,e,9;7,o,0;7,o,3;7,o,4;7,o,5;7,o,6;7,o,7;7,o,9;7,p,1;7,p,2;7,p,3;7,p,4;7,p,5;7,r,0;7,r,1;7,r,2;7,r,4;7,r,8;8,d,0;8,d,1;8,d,3;8,d,4;8,d,7;8,e,5;8,e,8;8,o,0;8,o,1;8,o,3;8,o,7;8,o,8;8,p,2;8,p,3;8,p,4;8,p,7;8,p,8;8,p,9;8,r,1;8,r,4;8,r,5;8,r,7;9,d,0;9,d,1;9,d,2;9,d,3;9,d,4;9,d,5;9,d,7;9,o,5;9,o,6;9,o,8;9,o,9;9,p,0;9,p,1;9,p,2;9,p,3;9,p,4;9,p,7;9,p,8;9,r,1;9,r,2;9,r,3;9,r,4;9,r,6;9,r,8#7#0;1;3;5;6");
		assertEquals("0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9;7/9#d;o;p;r#0/1/2/3/4/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,o,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,p,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,r,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9,o,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9,p,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9,r,0/1/2/3/4/5/6/7/8/9;7/9,d,0/1/2/3/4/5/6/7/8/9;7/9,o,0/1/2/3/4/5/6/7/8/9;7/9,p,0/1/2/3/4/5/6/7/8/9;7/9,r,0/1/2/3/4/5/6/8/9#7/9#0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12#d;x#0,d,2;0,d,3;0,d,5;0,d,6;0,d,9;0,d,10;0,d,12;0,x,2;0,x,5;0,x,8;0,x,9;0,x,11;1,d,1;1,d,3;1,d,4;1,d,5;1,d,6;1,d,10;1,d,11;1,x,3;1,x,4;1,x,5;1,x,8;1,x,10;1,x,11;1,x,12;2,d,0;2,d,3;2,d,4;2,d,5;2,d,8;2,d,9;2,x,0;2,x,1;2,x,4;2,x,5;2,x,6;2,x,7;2,x,10;3,d,2;3,d,3;3,d,6;3,d,8;3,d,9;3,d,11;3,x,0;3,x,1;3,x,8;3,x,9;4,d,0;4,d,1;4,d,2;4,d,4;4,d,6;4,d,11;4,x,1;4,x,2;4,x,7;4,x,11;5,d,0;5,d,1;5,d,2;5,d,3;5,d,6;5,d,12;5,x,1;5,x,4;5,x,6;5,x,8;5,x,9;5,x,10;5,x,11;6,d,0;6,d,1;6,d,7;6,d,9;6,d,11;6,d,12;6,x,0;6,x,6;6,x,9;6,x,10;6,x,11;6,x,12;7,d,0;7,d,2;7,d,5;7,d,6;7,d,7;7,d,8;7,x,2;7,x,6;7,x,7;7,x,8;8,d,1;8,d,7;8,d,9;8,d,12;8,x,0;8,x,3;8,x,4;8,x,6;8,x,9;8,x,10;9,d,1;9,d,2;9,d,3;9,d,6;9,d,7;9,d,9;9,d,12;9,x,0;9,x,2;9,x,6;9,x,7;9,x,10;10,d,3;10,d,4;10,d,7;10,d,9;10,d,10;10,d,12;10,x,0;10,x,1;10,x,8;10,x,11;10,x,12;11,d,1;11,d,3;11,d,4;11,d,11;11,d,12;11,x,0;11,x,1;11,x,2;11,x,3;11,x,4;11,x,8;11,x,9;12,d,2;12,d,3;12,d,8;12,d,9;12,d,10;12,d,11;12,d,12;12,x,2;12,x,4;12,x,5;12,x,9;12,x,10;12,x,12#5#2;3;4;12");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/9/10/11/12;0/1/2/3/6/12;1/4/6/8/9/10/11;5#d;x#0/1/2/3/4/5/6/7/8/9/10/11/12,d,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/11/12,x,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/9/10/11/12,d,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/9/10/11/12,x,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/6/12,d,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/6/12,x,0/1/2/3/4/5/6/7/8/9/10/11/12;1/4/6/8/9/10/11,d,0/1/2/3/4/5/6/7/9/10/11/12;1/4/6/8/9/10/11,x,0/1/2/3/4/5/6/7/8/9/10/11/12;5,d,0/1/2/3/6/12;5,x,1/4/6/8/9/10/11#5#0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/9/10/11/12;0/1/2/3/6/12;1/4/6/8/9/10/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#j;m;q;z#0,m,1;1,e,0;1,e,3;2,e,0;2,e,3;3,e,4;3,e,6;4,q,5;5,e,8;6,z,7;7,e,8;8,e,9;8,e,11;9,j,10;10,e,9;10,e,11#2#11");
		assertEquals("-1;0/1/3/4/6;0/2/3/4/6;5/8/9/11;7/8/9/11;9/10/11#j;m;q;z#-1,j,-1;-1,m,-1;-1,q,-1;-1,z,-1;0/1/3/4/6,j,-1;0/1/3/4/6,m,0/1/3/4/6;0/1/3/4/6,q,5/8/9/11;0/1/3/4/6,z,7/8/9/11;0/2/3/4/6,j,-1;0/2/3/4/6,m,0/1/3/4/6;0/2/3/4/6,q,5/8/9/11;0/2/3/4/6,z,7/8/9/11;5/8/9/11,j,9/10/11;5/8/9/11,m,-1;5/8/9/11,q,-1;5/8/9/11,z,-1;7/8/9/11,j,9/10/11;7/8/9/11,m,-1;7/8/9/11,q,-1;7/8/9/11,z,-1;9/10/11,j,9/10/11;9/10/11,m,-1;9/10/11,q,-1;9/10/11,z,-1#0/2/3/4/6#5/8/9/11;7/8/9/11;9/10/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12;13;14#g;v#0,g,1;0,g,5;0,g,6;0,g,7;0,g,12;0,v,2;0,v,4;0,v,9;0,v,10;0,v,11;0,v,12;1,g,3;1,g,5;1,g,7;1,g,10;1,g,12;1,v,0;1,v,4;1,v,5;1,v,7;1,v,8;1,v,12;1,v,14;2,g,0;2,g,2;2,g,4;2,g,6;2,g,7;2,g,9;2,g,14;2,v,1;2,v,2;2,v,3;2,v,5;2,v,11;2,v,12;2,v,13;3,e,4;3,g,1;3,g,2;3,g,3;3,g,10;3,g,11;3,g,12;3,v,2;3,v,9;3,v,10;3,v,14;4,g,0;4,g,5;4,g,6;4,g,9;4,g,14;4,v,0;4,v,5;4,v,7;4,v,9;4,v,12;4,v,13;4,v,14;5,e,2;5,e,8;5,g,6;5,g,7;5,g,8;5,g,9;5,g,11;5,v,0;5,v,1;5,v,4;5,v,7;5,v,11;6,e,8;6,g,2;6,g,3;6,g,6;6,g,12;6,g,13;6,v,4;6,v,5;6,v,6;6,v,7;6,v,9;6,v,12;6,v,13;7,g,0;7,g,1;7,g,5;7,g,9;7,v,0;7,v,6;7,v,8;7,v,11;8,e,7;8,g,5;8,g,7;8,g,8;8,g,10;8,g,13;8,g,14;8,v,1;8,v,4;8,v,5;8,v,12;9,g,0;9,g,1;9,g,3;9,g,4;9,g,6;9,g,12;9,g,14;9,v,1;9,v,2;9,v,5;9,v,9;9,v,10;9,v,14;10,e,7;10,g,1;10,g,2;10,g,5;10,g,9;10,g,10;10,g,12;10,g,14;10,v,0;10,v,1;10,v,10;10,v,13;11,g,0;11,g,2;11,g,4;11,g,5;11,g,9;11,g,10;11,v,4;11,v,7;11,v,10;11,v,12;11,v,14;12,g,1;12,g,2;12,g,5;12,g,7;12,g,11;12,g,12;12,g,14;12,v,4;12,v,5;12,v,6;12,v,11;12,v,12;12,v,13;13,e,11;13,g,2;13,g,5;13,g,6;13,g,9;13,g,14;13,v,3;13,v,9;13,v,10;13,v,12;13,v,13;14,g,0;14,g,2;14,g,3;14,g,4;14,g,11;14,g,12;14,g,13;14,v,11;14,v,12;14,v,13;14,v,14#3#2;3;4;6;7");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/1/2/3/4/5/6/7/8/9/10/11/12/14;0/2/5/7/8/9/10/11/12/13/14;3/4#g;v#0/1/2/3/4/5/6/7/8/9/10/11/12/13/14,g,0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/1/2/3/4/5/6/7/8/9/10/11/12/13/14,v,0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/1/2/3/4/5/6/7/8/9/10/11/12/14,g,0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/1/2/3/4/5/6/7/8/9/10/11/12/14,v,0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/2/5/7/8/9/10/11/12/13/14,g,0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/2/5/7/8/9/10/11/12/13/14,v,0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;3/4,g,0/1/2/3/4/5/6/7/8/9/10/11/12/14;3/4,v,0/2/5/7/8/9/10/11/12/13/14#3/4#0/1/2/3/4/5/6/7/8/9/10/11/12/13/14;0/1/2/3/4/5/6/7/8/9/10/11/12/14;0/2/5/7/8/9/10/11/12/13/14;3/4", nfaToDfa.toString());
	}

}