package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch0 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9#i;r#0,i,1;1,e,5;2,e,3;3,e,5;4,e,0;4,e,2;5,e,9;6,r,7;7,e,9;8,e,4;8,e,6#8#9");
		assertEquals(
				"-1;0/2/3/4/5/6/8/9;1/5/9;7/9#i;r#-1,i,-1;-1,r,-1;0/2/3/4/5/6/8/9,i,1/5/9;0/2/3/4/5/6/8/9,r,7/9;1/5/9,i,-1;1/5/9,r,-1;7/9,i,-1;7/9,r,-1#0/2/3/4/5/6/8/9#0/2/3/4/5/6/8/9;1/5/9;7/9",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9#a;f;h;t;z#0,f,1;1,f,2;2,t,3;3,h,4;4,e,5;4,e,7;5,z,6;6,e,9;7,a,8;8,e,9#0#9");
		assertEquals(
				"-1;0;1;2;3;4/5/7;6/9;8/9#a;f;h;t;z#-1,a,-1;-1,f,-1;-1,h,-1;-1,t,-1;-1,z,-1;0,a,-1;0,f,1;0,h,-1;0,t,-1;0,z,-1;1,a,-1;1,f,2;1,h,-1;1,t,-1;1,z,-1;2,a,-1;2,f,-1;2,h,-1;2,t,3;2,z,-1;3,a,-1;3,f,-1;3,h,4/5/7;3,t,-1;3,z,-1;4/5/7,a,8/9;4/5/7,f,-1;4/5/7,h,-1;4/5/7,t,-1;4/5/7,z,6/9;6/9,a,-1;6/9,f,-1;6/9,h,-1;6/9,t,-1;6/9,z,-1;8/9,a,-1;8/9,f,-1;8/9,h,-1;8/9,t,-1;8/9,z,-1#0#6/9;8/9",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9;10#j;m#0,e,1;0,e,5;0,j,1;0,j,3;0,j,5;0,j,7;0,j,8;0,j,9;0,j,10;0,m,0;0,m,1;0,m,2;0,m,3;0,m,6;1,e,8;1,e,10;1,j,0;1,j,5;1,j,6;1,j,7;1,j,8;1,m,0;1,m,1;1,m,3;1,m,4;1,m,5;1,m,8;2,j,0;2,j,2;2,j,3;2,j,6;2,j,7;2,j,8;2,m,2;2,m,4;2,m,5;2,m,6;2,m,8;2,m,9;3,j,0;3,j,5;3,j,6;3,j,8;3,j,9;3,j,10;3,m,1;3,m,4;3,m,5;3,m,9;4,e,7;4,j,0;4,j,2;4,j,3;4,j,5;4,j,6;4,j,8;4,j,9;4,m,0;4,m,1;4,m,5;4,m,8;4,m,10;5,e,4;5,j,2;5,j,6;5,j,7;5,j,9;5,m,2;5,m,3;5,m,5;5,m,6;6,e,8;6,j,0;6,j,2;6,j,3;6,j,4;6,j,6;6,j,7;6,m,2;6,m,4;6,m,5;6,m,6;6,m,7;7,e,0;7,e,4;7,j,0;7,j,1;7,j,2;7,j,3;7,j,10;7,m,0;7,m,1;7,m,4;7,m,6;7,m,7;7,m,9;7,m,10;8,j,0;8,j,1;8,j,2;8,j,7;8,j,8;8,j,9;8,m,1;8,m,2;8,m,3;8,m,4;8,m,5;8,m,7;8,m,10;9,j,1;9,j,2;9,j,3;9,j,4;9,j,5;9,j,10;9,m,5;9,m,7;9,m,8;9,m,10;10,j,3;10,j,4;10,j,6;10,j,7;10,m,1;10,m,4;10,m,5;10,m,7#0#0;2;6;8;10");
		assertEquals(
				"0/1/2/3/4/5/6/7/8/9/10;0/1/4/5/7/8/10#j;m#0/1/2/3/4/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,m,0/1/2/3/4/5/6/7/8/9/10;0/1/4/5/7/8/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/4/5/7/8/10,m,0/1/2/3/4/5/6/7/8/9/10#0/1/4/5/7/8/10#0/1/2/3/4/5/6/7/8/9/10;0/1/4/5/7/8/10",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7#j;t;v#0,e,3;0,j,0;0,j,2;0,j,3;0,j,5;0,j,6;0,j,7;0,t,1;0,t,2;0,t,3;0,t,4;0,t,5;0,t,7;0,v,0;0,v,2;0,v,4;0,v,5;0,v,6;0,v,7;1,e,0;1,j,0;1,j,1;1,j,4;1,j,5;1,j,6;1,j,7;1,t,0;1,t,2;1,t,4;1,t,5;1,v,0;1,v,1;1,v,2;1,v,3;1,v,4;1,v,5;2,e,1;2,e,7;2,j,0;2,j,1;2,j,3;2,j,5;2,j,6;2,j,7;2,t,2;2,t,3;2,t,5;2,t,7;2,v,2;2,v,3;2,v,4;2,v,7;3,e,7;3,j,0;3,j,3;3,j,4;3,j,5;3,j,7;3,t,0;3,t,1;3,t,5;3,t,7;3,v,0;3,v,2;3,v,4;3,v,7;4,e,4;4,j,0;4,j,2;4,j,3;4,j,4;4,j,5;4,j,6;4,j,7;4,t,0;4,t,1;4,t,2;4,t,3;4,t,5;4,t,6;4,t,7;4,v,1;4,v,2;4,v,3;4,v,5;4,v,6;5,j,1;5,j,3;5,j,4;5,j,5;5,t,0;5,t,1;5,t,2;5,t,3;5,t,5;5,t,7;5,v,0;5,v,1;5,v,4;5,v,5;5,v,6;6,e,7;6,j,0;6,j,1;6,j,3;6,j,5;6,j,6;6,j,7;6,t,0;6,t,1;6,t,2;6,t,4;6,t,5;6,v,1;6,v,2;6,v,3;6,v,4;6,v,5;6,v,7;7,e,2;7,j,1;7,j,2;7,j,4;7,j,5;7,j,6;7,t,2;7,t,3;7,t,4;7,t,5;7,v,0;7,v,2;7,v,3;7,v,4;7,v,5;7,v,6#6#0;3;6;7");
		assertEquals(
				"0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;0/1/2/3/6/7#j;t;v#0/1/2/3/4/5/6/7,j,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,t,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,v,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,j,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,t,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,v,0/1/2/3/4/5/6/7;0/1/2/3/6/7,j,0/1/2/3/4/5/6/7;0/1/2/3/6/7,t,0/1/2/3/4/5/7;0/1/2/3/6/7,v,0/1/2/3/4/5/6/7#0/1/2/3/6/7#0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;0/1/2/3/6/7",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9;10#b;c;g;i;j#0,b,0;0,b,3;0,b,5;0,b,7;0,b,8;0,b,9;0,b,10;0,c,0;0,c,3;0,c,5;0,c,6;0,c,10;0,e,7;0,g,3;0,g,4;0,g,6;0,g,9;0,i,0;0,i,2;0,i,3;0,i,4;0,i,6;0,i,9;0,i,10;0,j,0;0,j,2;0,j,3;0,j,6;0,j,8;0,j,10;1,b,0;1,b,1;1,b,2;1,b,6;1,b,9;1,b,10;1,c,0;1,c,3;1,c,4;1,c,5;1,c,9;1,c,10;1,g,0;1,g,3;1,g,4;1,g,5;1,g,8;1,g,9;1,g,10;1,i,0;1,i,1;1,i,5;1,i,10;1,j,1;1,j,2;1,j,4;1,j,7;1,j,10;2,b,6;2,b,7;2,b,8;2,b,9;2,c,0;2,c,1;2,c,7;2,c,10;2,e,3;2,e,5;2,g,0;2,g,1;2,g,5;2,g,6;2,i,1;2,i,3;2,i,5;2,i,7;2,i,8;2,j,0;2,j,3;2,j,5;2,j,6;3,b,0;3,b,2;3,b,3;3,b,7;3,b,8;3,b,9;3,c,0;3,c,4;3,c,8;3,c,9;3,e,2;3,g,0;3,g,6;3,g,8;3,g,9;3,i,3;3,i,4;3,i,6;3,i,7;3,i,8;3,i,10;3,j,4;3,j,5;3,j,6;3,j,7;3,j,8;4,b,1;4,b,2;4,b,6;4,b,8;4,b,9;4,c,0;4,c,2;4,c,6;4,c,7;4,c,10;4,e,5;4,g,1;4,g,2;4,g,5;4,g,6;4,g,7;4,g,8;4,g,10;4,i,1;4,i,2;4,i,3;4,i,4;4,i,6;4,i,8;4,i,10;4,j,0;4,j,1;4,j,5;4,j,7;4,j,8;4,j,9;5,b,0;5,b,2;5,b,5;5,b,7;5,c,3;5,c,4;5,c,5;5,c,6;5,c,8;5,c,9;5,e,8;5,g,3;5,g,5;5,g,8;5,g,9;5,i,2;5,i,3;5,i,6;5,i,7;5,i,8;5,i,9;5,j,1;5,j,5;5,j,6;5,j,7;5,j,8;6,b,1;6,b,2;6,b,5;6,b,9;6,c,1;6,c,3;6,c,6;6,c,8;6,g,2;6,g,3;6,g,4;6,g,6;6,g,9;6,g,10;6,i,0;6,i,2;6,i,3;6,i,4;6,i,5;6,i,8;6,i,10;6,j,1;6,j,3;6,j,5;6,j,8;7,b,0;7,b,4;7,b,5;7,b,6;7,b,7;7,c,0;7,c,4;7,c,5;7,c,7;7,c,8;7,e,1;7,g,0;7,g,2;7,g,4;7,g,6;7,g,7;7,g,8;7,g,9;7,i,1;7,i,3;7,i,4;7,i,9;7,i,10;7,j,3;7,j,6;7,j,8;7,j,10;8,b,0;8,b,4;8,b,5;8,b,7;8,b,8;8,b,9;8,b,10;8,c,1;8,c,2;8,c,6;8,c,7;8,c,8;8,c,9;8,c,10;8,g,1;8,g,2;8,g,6;8,g,8;8,g,10;8,i,0;8,i,4;8,i,9;8,i,10;8,j,0;8,j,1;8,j,4;8,j,5;8,j,6;8,j,10;9,b,1;9,b,2;9,b,3;9,b,5;9,b,8;9,b,9;9,c,0;9,c,4;9,c,5;9,c,7;9,c,8;9,c,9;9,c,10;9,e,2;9,g,1;9,g,3;9,g,4;9,g,9;9,i,5;9,i,8;9,i,9;9,i,10;9,j,0;9,j,4;9,j,7;9,j,9;10,b,2;10,b,4;10,b,6;10,b,7;10,b,8;10,b,9;10,b,10;10,c,0;10,c,1;10,c,3;10,c,7;10,c,8;10,c,10;10,e,5;10,g,0;10,g,5;10,g,7;10,g,8;10,i,0;10,i,1;10,i,2;10,i,3;10,i,4;10,i,6;10,i,9;10,j,0;10,j,2;10,j,3;10,j,8;10,j,9#10#0;4;7;10");
		assertEquals(
				"0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10;5/8/10#b;c;g;i;j#0/1/2/3/4/5/6/7/8/9/10,b,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,c,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,g,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,i,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,b,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,c,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,g,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,i,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;5/8/10,b,0/1/2/3/4/5/6/7/8/9/10;5/8/10,c,0/1/2/3/4/5/6/7/8/9/10;5/8/10,g,0/1/2/3/5/6/7/8/9/10;5/8/10,i,0/1/2/3/4/5/6/7/8/9/10;5/8/10,j,0/1/2/3/4/5/6/7/8/9/10#5/8/10#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10;5/8/10",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9;10#j;o#0,j,0;0,j,6;0,j,9;0,j,10;0,o,0;0,o,1;0,o,4;0,o,10;1,e,1;1,j,0;1,j,1;1,j,2;1,j,4;1,j,5;1,j,6;1,j,10;1,o,1;1,o,4;1,o,5;1,o,9;1,o,10;2,e,2;2,j,2;2,j,3;2,j,4;2,j,6;2,j,7;2,j,8;2,o,0;2,o,1;2,o,3;2,o,8;2,o,10;3,e,3;3,j,0;3,j,1;3,j,2;3,j,4;3,j,10;3,o,0;3,o,2;3,o,3;3,o,4;3,o,5;3,o,6;3,o,9;4,j,4;4,j,5;4,j,7;4,j,8;4,j,9;4,j,10;4,o,1;4,o,2;4,o,5;4,o,7;4,o,10;5,j,0;5,j,3;5,j,8;5,j,9;5,o,1;5,o,5;5,o,6;5,o,7;5,o,8;5,o,10;6,j,3;6,j,4;6,j,8;6,j,9;6,j,10;6,o,1;6,o,2;6,o,3;6,o,6;6,o,9;6,o,10;7,e,7;7,j,1;7,j,2;7,j,3;7,j,4;7,j,5;7,j,6;7,j,7;7,o,0;7,o,2;7,o,3;7,o,4;7,o,8;8,e,8;8,j,1;8,j,3;8,j,6;8,j,8;8,o,1;8,o,3;8,o,4;8,o,6;8,o,7;8,o,9;8,o,10;9,e,9;9,j,4;9,j,5;9,j,7;9,j,8;9,j,9;9,j,10;9,o,0;9,o,1;9,o,2;9,o,3;9,o,6;9,o,9;9,o,10;10,e,10;10,j,0;10,j,2;10,j,4;10,j,5;10,j,6;10,j,9;10,j,10;10,o,1;10,o,2;10,o,3;10,o,6#10#0;1;2;7");
		assertEquals(
				"0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/8/9/10;0/2/3/4/5/6/7/8/9/10;0/2/4/5/6/9/10;1/2/3/6;10#j;o#0/1/2/3/4/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/5/6/7/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/2/4/5/6/9/10,j,0/2/3/4/5/6/7/8/9/10;0/2/4/5/6/9/10,o,0/1/2/3/4/5/6/7/8/9/10;1/2/3/6,j,0/1/2/3/4/5/6/7/8/9/10;1/2/3/6,o,0/1/2/3/4/5/6/8/9/10;10,j,0/2/4/5/6/9/10;10,o,1/2/3/6#10#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/8/9/10;0/2/3/4/5/6/7/8/9/10;0/2/4/5/6/9/10;1/2/3/6",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9#i;u#0,i,0;0,i,2;0,i,3;0,i,7;0,i,8;0,u,0;0,u,1;0,u,3;0,u,4;0,u,6;1,i,0;1,i,1;1,i,4;1,i,5;1,i,6;1,i,7;1,i,9;1,u,1;1,u,2;1,u,5;1,u,6;1,u,7;1,u,8;1,u,9;2,i,1;2,i,2;2,i,3;2,i,6;2,i,7;2,i,8;2,i,9;2,u,4;2,u,5;2,u,6;2,u,8;3,i,0;3,i,1;3,i,3;3,i,4;3,i,6;3,i,7;3,i,9;3,u,0;3,u,1;3,u,2;3,u,4;3,u,5;3,u,6;3,u,8;4,i,0;4,i,1;4,i,3;4,i,4;4,i,6;4,i,9;4,u,0;4,u,1;4,u,2;4,u,3;4,u,7;5,i,0;5,i,1;5,i,2;5,i,6;5,u,0;5,u,1;5,u,3;5,u,4;5,u,8;5,u,9;6,i,1;6,i,2;6,i,3;6,i,4;6,i,6;6,i,7;6,i,9;6,u,0;6,u,1;6,u,2;6,u,3;6,u,7;6,u,8;6,u,9;7,i,3;7,i,5;7,i,7;7,i,9;7,u,0;7,u,2;7,u,3;7,u,4;7,u,5;7,u,6;8,i,0;8,i,1;8,i,3;8,i,5;8,i,8;8,u,0;8,u,1;8,u,4;8,u,5;8,u,7;8,u,8;9,i,0;9,i,1;9,i,2;9,i,3;9,i,4;9,i,5;9,i,7;9,u,0;9,u,3;9,u,5;9,u,6;9,u,7;9,u,9#4#0;5");
		assertEquals(
				"0/1/2/3/4/5/6/7/8/9;0/1/2/3/7;0/1/3/4/6/9;4#i;u#0/1/2/3/4/5/6/7/8/9,i,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,u,0/1/2/3/4/5/6/7/8/9;0/1/2/3/7,i,0/1/2/3/4/5/6/7/8/9;0/1/2/3/7,u,0/1/2/3/4/5/6/7/8/9;0/1/3/4/6/9,i,0/1/2/3/4/5/6/7/8/9;0/1/3/4/6/9,u,0/1/2/3/4/5/6/7/8/9;4,i,0/1/3/4/6/9;4,u,0/1/2/3/7#4#0/1/2/3/4/5/6/7/8/9;0/1/2/3/7;0/1/3/4/6/9",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8#c;j#0,c,0;0,c,1;0,c,2;0,c,3;0,c,4;0,c,8;0,j,2;0,j,5;0,j,7;0,j,8;1,c,1;1,c,2;1,c,3;1,c,5;1,c,6;1,c,7;1,j,0;1,j,2;1,j,3;1,j,4;1,j,5;1,j,6;1,j,8;2,c,0;2,c,1;2,c,3;2,c,4;2,c,5;2,c,6;2,c,8;2,j,0;2,j,1;2,j,2;2,j,3;2,j,5;2,j,7;2,j,8;3,c,0;3,c,1;3,c,2;3,c,4;3,c,5;3,j,0;3,j,1;3,j,2;3,j,6;3,j,7;3,j,8;4,c,1;4,c,2;4,c,3;4,c,8;4,j,0;4,j,6;4,j,7;4,j,8;5,c,2;5,c,3;5,c,4;5,c,6;5,j,0;5,j,2;5,j,3;5,j,4;6,c,0;6,c,3;6,c,4;6,c,5;6,c,7;6,c,8;6,j,1;6,j,2;6,j,3;6,j,4;6,j,7;6,j,8;7,c,0;7,c,1;7,c,5;7,c,6;7,c,8;7,j,0;7,j,1;7,j,2;7,j,4;7,j,5;8,c,0;8,c,1;8,c,2;8,c,3;8,c,6;8,c,7;8,c,8;8,j,0;8,j,1;8,j,3;8,j,4;8,j,5;8,j,7#0#1;2");
		assertEquals(
				"0;0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/7/8;0/1/2/3/4/8;2/5/7/8#c;j#0,c,0/1/2/3/4/8;0,j,2/5/7/8;0/1/2/3/4/5/6/7/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,j,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/7/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/7/8,j,0/1/2/3/4/5/6/7/8;0/1/2/3/4/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/8,j,0/1/2/3/4/5/6/7/8;2/5/7/8,c,0/1/2/3/4/5/6/7/8;2/5/7/8,j,0/1/2/3/4/5/7/8#0#0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/7/8;0/1/2/3/4/8;2/5/7/8",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9#p;r;s#0,p,2;0,p,3;0,p,4;0,p,6;0,p,8;0,r,0;0,r,1;0,r,4;0,r,5;0,r,6;0,r,7;0,s,4;0,s,6;0,s,7;0,s,8;1,p,0;1,p,2;1,p,3;1,p,5;1,p,7;1,p,8;1,p,9;1,r,0;1,r,4;1,r,5;1,r,9;1,s,2;1,s,5;1,s,6;1,s,8;2,p,0;2,p,1;2,p,4;2,p,6;2,p,9;2,r,0;2,r,1;2,r,4;2,r,6;2,r,7;2,r,9;2,s,0;2,s,2;2,s,3;2,s,4;2,s,6;2,s,7;2,s,8;3,p,0;3,p,3;3,p,4;3,p,5;3,p,6;3,p,7;3,p,8;3,r,0;3,r,1;3,r,3;3,r,4;3,r,6;3,r,7;3,r,8;3,s,0;3,s,4;3,s,5;3,s,6;4,p,1;4,p,2;4,p,3;4,p,5;4,p,6;4,p,9;4,r,0;4,r,1;4,r,6;4,r,8;4,r,9;4,s,1;4,s,2;4,s,5;4,s,8;4,s,9;5,p,1;5,p,2;5,p,3;5,p,4;5,p,7;5,p,9;5,r,2;5,r,3;5,r,5;5,r,6;5,r,8;5,r,9;5,s,0;5,s,1;5,s,3;5,s,4;5,s,7;5,s,8;5,s,9;6,p,1;6,p,2;6,p,3;6,p,9;6,r,2;6,r,3;6,r,4;6,r,5;6,r,7;6,r,8;6,s,0;6,s,4;6,s,6;6,s,7;6,s,8;7,p,0;7,p,2;7,p,3;7,p,4;7,p,6;7,p,7;7,p,8;7,r,0;7,r,3;7,r,4;7,r,5;7,r,6;7,r,7;7,r,9;7,s,1;7,s,2;7,s,5;7,s,7;8,p,1;8,p,2;8,p,3;8,p,4;8,p,5;8,p,7;8,p,8;8,r,0;8,r,2;8,r,7;8,r,8;8,r,9;8,s,0;8,s,5;8,s,7;8,s,9;9,p,0;9,p,1;9,p,3;9,p,4;9,p,6;9,p,7;9,p,9;9,r,0;9,r,2;9,r,3;9,r,5;9,r,6;9,r,7;9,r,9;9,s,0;9,s,2;9,s,5;9,s,6;9,s,7;9,s,9#1#0;7;8");
		assertEquals(
				"0/1/2/3/4/5/6/7/8/9;0/2/3/5/7/8/9;0/4/5/9;1;2/5/6/8#p;r;s#0/1/2/3/4/5/6/7/8/9,p,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,r,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,s,0/1/2/3/4/5/6/7/8/9;0/2/3/5/7/8/9,p,0/1/2/3/4/5/6/7/8/9;0/2/3/5/7/8/9,r,0/1/2/3/4/5/6/7/8/9;0/2/3/5/7/8/9,s,0/1/2/3/4/5/6/7/8/9;0/4/5/9,p,0/1/2/3/4/5/6/7/8/9;0/4/5/9,r,0/1/2/3/4/5/6/7/8/9;0/4/5/9,s,0/1/2/3/4/5/6/7/8/9;1,p,0/2/3/5/7/8/9;1,r,0/4/5/9;1,s,2/5/6/8;2/5/6/8,p,0/1/2/3/4/5/6/7/8/9;2/5/6/8,r,0/1/2/3/4/5/6/7/8/9;2/5/6/8,s,0/1/2/3/4/5/6/7/8/9#1#0/1/2/3/4/5/6/7/8/9;0/2/3/5/7/8/9;0/4/5/9;2/5/6/8",
				nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa = new NfaToDfa(
				"0;1;2;3;4;5;6;7;8;9;10;11#a;f;h;w#0,a,1;1,e,6;1,e,8;2,w,3;3,e,7;4,w,5;5,e,7;6,e,2;6,e,4;7,e,10;8,f,9;9,e,10;10,h,11#0#11");
		assertEquals(
				"-1;0;1/2/4/6/8;3/5/7/10;9/10;11#a;f;h;w#-1,a,-1;-1,f,-1;-1,h,-1;-1,w,-1;0,a,1/2/4/6/8;0,f,-1;0,h,-1;0,w,-1;1/2/4/6/8,a,-1;1/2/4/6/8,f,9/10;1/2/4/6/8,h,-1;1/2/4/6/8,w,3/5/7/10;3/5/7/10,a,-1;3/5/7/10,f,-1;3/5/7/10,h,11;3/5/7/10,w,-1;9/10,a,-1;9/10,f,-1;9/10,h,11;9/10,w,-1;11,a,-1;11,f,-1;11,h,-1;11,w,-1#0#11",
				nfaToDfa.toString());
	}

}