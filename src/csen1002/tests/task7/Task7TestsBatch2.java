package csen1002.tests.task7;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.Vocabulary;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task7.Task7Lexer;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task7TestsBatch2{
	
	/**
	 * Returns a string of tokenized lexemes.
	 *
	 * @param input is the string to be tokenized.
	 * @return Returns a formatted string representation of the list of tokens. The
	 *         string representation follows the one in the task description
	 */
	public static String tokenStream(String input) {
		// In case Task7Lexer is not defined correctly:
		// 1- If you modified the grammar in the g4 file, regenerate the ANTLR
		// recognizer to make sure that the latest grammar is generated
		// 2- Make sure that the location and the package are configured properly
		Task7Lexer lexer = new Task7Lexer(CharStreams.fromString(input));
		Vocabulary vocabulary = lexer.getVocabulary();
		List<? extends Token> tokens = lexer.getAllTokens();
		StringJoiner stringJoiner = new StringJoiner(";");
		for (Token token : tokens) {
			stringJoiner.add(token.getText() + "," + vocabulary.getSymbolicName(token.getType()));
		}
		return stringJoiner.toString();
	}


	@Test
	public void testString1() {
		assertEquals("100,ZERO;110,ZERO;010,ZERO;010,ZERO;101,ZERO;000,ONE;010,ZERO;011,ONE;011,ONE;000,ONE;000,ONE;011,ONE;001,ZERO;000,ONE;010,ZERO;000,ONE;010,ZERO;101,ZERO;100,ZERO;001,ZERO;001,ZERO;000,ONE;000,ONE;101,ZERO;001,ZERO;010,ZERO;000,ONE;000,ONE;000,ONE;110,ZERO;101,ZERO;010,ZERO;000,ONE;111,ONE;110,ZERO;010,ZERO;100,ZERO;101,ZERO;000,ONE;001,ZERO;111,ONE;000,ONE;110,ZERO;101,ZERO;101,ZERO;000,ONE;010,ZERO;100,ZERO;001,ZERO;100,ZERO;100,ZERO;001,ZERO;010,ZERO;000,ONE;001,ZERO;111,ONE;001,ZERO;101,ZERO;101,ZERO;111,ONE;001,ZERO;110,ZERO;100,ZERO;011,ONE;010,ZERO;100,ZERO;000,ONE;101,ZERO;100,ZERO;110,ZERO;101,ZERO;000,ONE;001,ZERO;101,ZERO;111,ONE;100,ZERO;111,ONE;001,ZERO;001,ZERO;110,ZERO;111,ONE;110,ZERO;011,ONE;000,ONE;100,ZERO;001,ZERO;000,ONE;011,ONE;000,ONE;011,ONE;110,ZERO;111,ONE;110,ZERO;110,ZERO;101,ZERO;110,ZERO;100,ZERO;000,ONE;001,ZERO;001,ZERO;011,ONE;100,ZERO;101,ZERO;001,ZERO;111,ONE;111,ONE;011,ONE;111,ONE;111,ONE;001,ZERO;111,ONE;011,ONE;100,ZERO;001,ZERO;001,ZERO;011,ONE;110,ZERO;110,ZERO;100,ZERO;111,ONE;110,ZERO;010,ZERO;110,ZERO;010,ZERO;100,ZERO;101,ZERO;010,ZERO;000,ONE;001,ZERO;000,ONE;000,ONE;110,ZERO;010,ZERO;110,ZERO;110,ZERO;010,ZERO;000,ONE;010,ZERO;111,ONE;1,ERROR", 
        tokenStream("1001100100101010000100110110000000110010000100000101011000010010000001010010100000000001101010100001111100101001010000011110001101011010000101000011001000010100000011110011011011110011101000110101000001011001101010000011011111001110010011101111100110001000010000110000111101111101101011101000000010010111001010011111110111111110011110111000010010111101101001111100101100101001010100000010000001100101101100100000101111"));
	}

	@Test
	public void testString2() {
		assertEquals("001,ZERO;011,ONE;000,ONE;100,ZERO;000,ONE;100,ZERO;011,ONE;110,ZERO;001,ZERO;001,ZERO;011,ONE;101,ZERO;000,ONE;111,ONE;000,ONE;001,ZERO;001,ZERO;000,ONE;001,ZERO;010,ZERO;110,ZERO;001,ZERO;000,ONE;001,ZERO;110,ZERO;001,ZERO;001,ZERO;111,ONE;010,ZERO;010,ZERO;100,ZERO;001,ZERO;100,ZERO;001,ZERO;111,ONE;111,ONE;101,ZERO;000,ONE;011,ONE;110,ZERO;010,ZERO;111,ONE;101,ZERO;111,ONE;010,ZERO;110,ZERO;010,ZERO;110,ZERO;100,ZERO;011,ONE;010,ZERO;110,ZERO;100,ZERO;010,ZERO;001,ZERO;010,ZERO;100,ZERO;011,ONE;100,ZERO;010,ZERO;110,ZERO;111,ONE;101,ZERO;000,ONE;110,ZERO;011,ONE;110,ZERO;001,ZERO;111,ONE;011,ONE;111,ONE;000,ONE;110,ZERO;011,ONE;100,ZERO;010,ZERO;111,ONE;101,ZERO;110,ZERO;000,ONE;100,ZERO;011,ONE;110,ZERO;101,ZERO;1,ERROR", 
        tokenStream("0010110001000001000111100010010111010001110000010010000010101100010000011100010011110100101000011000011111111010000111100101111011110101100101101000110101101000100010101000111000101101111010001100111100011110111110001100111000101111011100001000111101011"));
	}

	@Test
	public void testString3() {
		assertEquals("110,ZERO;101,ZERO;111,ONE;110,ZERO;101,ZERO;001,ZERO;100,ZERO;110,ZERO;000,ONE;000,ONE;011,ONE;110,ZERO;000,ONE;000,ONE;111,ONE;011,ONE;011,ONE;010,ZERO;100,ZERO;111,ONE;010,ZERO;100,ZERO;000,ONE;111,ONE;010,ZERO;001,ZERO;000,ONE;001,ZERO;011,ONE;011,ONE;011,ONE;110,ZERO;011,ONE;101,ZERO;000,ONE;110,ZERO;011,ONE;101,ZERO;101,ZERO;110,ZERO;001,ZERO;101,ZERO;011,ONE;001,ZERO;111,ONE;100,ZERO;010,ZERO;100,ZERO;000,ONE;001,ZERO;100,ZERO;110,ZERO;100,ZERO;010,ZERO;010,ZERO;101,ZERO;011,ONE;010,ZERO;010,ZERO;110,ZERO;000,ONE;100,ZERO;001,ZERO;101,ZERO;110,ZERO;111,ONE;001,ZERO;100,ZERO;001,ZERO;110,ZERO;101,ZERO;111,ONE;101,ZERO;111,ONE;111,ONE;111,ONE;101,ZERO;111,ONE;000,ONE;111,ONE;010,ZERO;011,ONE;100,ZERO;001,ZERO;0,ERROR", 
        tokenStream("1101011111101010011001100000000111100000001110110110101001110101000001110100010000010110110111100111010001100111011011100011010110011111000101000000011001101000100101010110100101100001000011011101110011000011101011111011111111111011110001110100111000010"));
	}

	@Test
	public void testString4() {
		assertEquals("001,ZERO;011,ONE;101,ZERO;000,ONE;111,ONE;101,ZERO;000,ONE;001,ZERO;010,ZERO;100,ZERO;000,ONE;011,ONE;101,ZERO;101,ZERO;111,ONE;100,ZERO;001,ZERO;000,ONE;000,ONE;001,ZERO;011,ONE;110,ZERO;100,ZERO;100,ZERO;011,ONE;000,ONE;001,ZERO;000,ONE;000,ONE;000,ONE;010,ZERO;001,ZERO;011,ONE;101,ZERO;000,ONE;010,ZERO;100,ZERO;011,ONE;101,ZERO;110,ZERO;001,ZERO;100,ZERO;010,ZERO;000,ONE;111,ONE;101,ZERO;111,ONE;101,ZERO;011,ONE;101,ZERO;000,ONE;101,ZERO;100,ZERO;000,ONE;100,ZERO;101,ZERO;110,ZERO;111,ONE;000,ONE;011,ONE;011,ONE;110,ZERO;111,ONE;110,ZERO;010,ZERO;010,ZERO;111,ONE;000,ONE;010,ZERO;111,ONE;101,ZERO;100,ZERO;001,ZERO;110,ZERO;001,ZERO;100,ZERO;100,ZERO;000,ONE;000,ONE;111,ONE;101,ZERO;001,ZERO;111,ONE;110,ZERO;011,ONE;010,ZERO;000,ONE;011,ONE;010,ZERO;111,ONE;111,ONE;001,ZERO;011,ONE;010,ZERO;001,ZERO;010,ZERO;001,ZERO;100,ZERO;100,ZERO;010,ZERO;000,ONE;010,ZERO;100,ZERO;110,ZERO;000,ONE;011,ONE;110,ZERO;110,ZERO;011,ONE;000,ONE;110,ZERO;010,ZERO;001,ZERO;100,ZERO;110,ZERO;101,ZERO;001,ZERO", 
        tokenStream("001011101000111101000001010100000011101101111100001000000001011110100100011000001000000000010001011101000010100011101110001100010000111101111101011101000101100000100101110111000011011110111110010010111000010111101100001110001100100000000111101001111110011010000011010111111001011010001010001100100010000010100110000011110110011000110010001100110101001"));
	}

	@Test
	public void testString5() {
		assertEquals("011,ONE;011,ONE;100,ZERO;100,ZERO;000,ONE;111,ONE;000,ONE;101,ZERO;111,ONE;100,ZERO;000,ONE;110,ZERO;001,ZERO;010,ZERO;000,ONE;110,ZERO;101,ZERO;001,ZERO;001,ZERO;001,ZERO;100,ZERO;011,ONE;010,ZERO;011,ONE;111,ONE;010,ZERO;010,ZERO;101,ZERO;000,ONE;100,ZERO;111,ONE;010,ZERO;101,ZERO;000,ONE;111,ONE;010,ZERO;100,ZERO;001,ZERO;111,ONE;110,ZERO;010,ZERO;101,ZERO;000,ONE;000,ONE;011,ONE;001,ZERO;111,ONE;001,ZERO;111,ONE;011,ONE;011,ONE;100,ZERO;011,ONE;111,ONE;101,ZERO;001,ZERO;100,ZERO;110,ZERO;111,ONE;111,ONE;111,ONE;010,ZERO;111,ONE;110,ZERO;101,ZERO;100,ZERO;000,ONE;100,ZERO;011,ONE;001,ZERO;110,ZERO;111,ONE;100,ZERO;110,ZERO;011,ONE;011,ONE;101,ZERO;000,ONE;100,ZERO;100,ZERO;010,ZERO;010,ZERO;110,ZERO;111,ONE;010,ZERO;10,ERROR", 
        tokenStream("01101110010000011100010111110000011000101000011010100100100110001101001111101001010100010011101010100011101010000111111001010100000001100111100111101101110001111110100110011011111111101011111010110000010001100111011110011001101110100010010001001011011101010"));
	}

	@Test
	public void testString6() {
		assertEquals("000,ONE;000,ONE;101,ZERO;101,ZERO;011,ONE;111,ONE;001,ZERO;011,ONE;101,ZERO;100,ZERO;110,ZERO;100,ZERO;000,ONE;001,ZERO;110,ZERO;011,ONE;010,ZERO;111,ONE;100,ZERO;000,ONE;100,ZERO;011,ONE;110,ZERO;100,ZERO;000,ONE;000,ONE;101,ZERO;101,ZERO;011,ONE;001,ZERO;000,ONE;100,ZERO;110,ZERO;000,ONE;101,ZERO;001,ZERO;101,ZERO;000,ONE;100,ZERO;000,ONE;110,ZERO;101,ZERO;001,ZERO;100,ZERO;110,ZERO;010,ZERO;110,ZERO;010,ZERO;100,ZERO;011,ONE;011,ONE;100,ZERO;110,ZERO;010,ZERO;110,ZERO;101,ZERO;100,ZERO;111,ONE;100,ZERO;101,ZERO;101,ZERO;001,ZERO;100,ZERO;000,ONE;010,ZERO;101,ZERO;000,ONE;111,ONE;001,ZERO;000,ONE;001,ZERO;111,ONE;000,ONE;110,ZERO;100,ZERO;100,ZERO;000,ONE;111,ONE;001,ZERO;000,ONE;111,ONE;011,ONE;101,ZERO;101,ZERO;010,ZERO;110,ZERO;000,ONE;0,ERROR", 
        tokenStream("0000001011010111110010111011001101000000011100110101111000001000111101000000001011010110010001001100001010011010001000001101010011001100101100101000110111001100101101011001111001011010011000000101010001110010000011110001101001000001110010001110111011010101100000"));
	}

	@Test
	public void testString7() {
		assertEquals("000,ONE;001,ZERO;111,ONE;000,ONE;110,ZERO;011,ONE;000,ONE;111,ONE;101,ZERO;010,ZERO;000,ONE;10,ERROR", 
        tokenStream("00000111100011001100011110101000010"));
	}

	@Test
	public void testString8() {
		assertEquals("101,ZERO;011,ONE;110,ZERO;010,ZERO;010,ZERO;100,ZERO;101,ZERO;001,ZERO;100,ZERO;001,ZERO;010,ZERO;000,ONE;111,ONE;101,ZERO;011,ONE;101,ZERO;111,ONE;010,ZERO;100,ZERO;100,ZERO;000,ONE;110,ZERO;101,ZERO;101,ZERO;101,ZERO;000,ONE;000,ONE;101,ZERO;110,ZERO;101,ZERO;011,ONE;000,ONE;111,ONE;101,ZERO;011,ONE;110,ZERO;111,ONE;101,ZERO;111,ONE;010,ZERO;111,ONE;001,ZERO;100,ZERO;101,ZERO;111,ONE;110,ZERO;001,ZERO;110,ZERO;011,ONE;001,ZERO;101,ZERO;100,ZERO;110,ZERO;000,ONE;111,ONE;111,ONE;111,ONE;111,ONE;110,ZERO;001,ZERO;001,ZERO;010,ZERO;111,ONE;111,ONE;100,ZERO;001,ZERO;000,ONE;010,ZERO;011,ONE;110,ZERO;001,ZERO;011,ONE;000,ONE;110,ZERO;111,ONE;011,ONE;000,ONE;001,ZERO;110,ZERO;010,ZERO;100,ZERO;001,ZERO;000,ONE;111,ONE;000,ONE;111,ONE;000,ONE;0,ERROR", 
        tokenStream("1010111100100101001010011000010100001111010111011110101001000001101011011010000001011101010110001111010111101111011110101110011001011111100011100110011011001100001111111111111100010010101111111000010000100111100010110001101110110000011100101000010001110001110000"));
	}

	@Test
	public void testString9() {
		assertEquals("010,ZERO;110,ZERO;100,ZERO;100,ZERO;101,ZERO;001,ZERO;110,ZERO;010,ZERO;110,ZERO;001,ZERO;101,ZERO;111,ONE;111,ONE;101,ZERO;000,ONE;001,ZERO;010,ZERO;000,ONE;100,ZERO;010,ZERO;001,ZERO;100,ZERO;101,ZERO;111,ONE;101,ZERO;011,ONE;000,ONE;011,ONE;111,ONE;111,ONE;001,ZERO;000,ONE;010,ZERO;110,ZERO;100,ZERO;111,ONE;100,ZERO;110,ZERO;011,ONE;111,ONE;110,ZERO;001,ZERO;1,ERROR", 
        tokenStream("0101101001001010011100101100011011111111010000010100001000100011001011111010110000111111110010000101101001111001100111111100011"));
	}

	@Test
	public void testString10() {
		assertEquals("001,ZERO;001,ZERO;010,ZERO;110,ZERO;110,ZERO;000,ONE;001,ZERO;111,ONE;000,ONE;100,ZERO;000,ONE;001,ZERO;010,ZERO;011,ONE;100,ZERO;001,ZERO;100,ZERO;011,ONE;101,ZERO;100,ZERO;100,ZERO;111,ONE;010,ZERO;011,ONE;110,ZERO;010,ZERO;110,ZERO;010,ZERO;110,ZERO;111,ONE;111,ONE;111,ONE;101,ZERO;100,ZERO;000,ONE;010,ZERO;101,ZERO;111,ONE;001,ZERO;101,ZERO;010,ZERO;010,ZERO;010,ZERO;010,ZERO;110,ZERO;011,ONE;001,ZERO;111,ONE;100,ZERO;111,ONE;001,ZERO;110,ZERO;111,ONE;001,ZERO;101,ZERO;011,ONE;010,ZERO;111,ONE;001,ZERO;100,ZERO;111,ONE;111,ONE;101,ZERO;011,ONE;000,ONE;100,ZERO;110,ZERO;111,ONE;010,ZERO;011,ONE;010,ZERO;110,ZERO;000,ONE;111,ONE;000,ONE;111,ONE;100,ZERO;110,ZERO;000,ONE;110,ZERO;011,ONE;000,ONE;001,ZERO;110,ZERO;100,ZERO;110,ZERO;101,ZERO;100,ZERO;111,ONE;010,ZERO;011,ONE;110,ZERO;011,ONE;101,ZERO;101,ZERO", 
        tokenStream("001001010110110000001111000100000001010011100001100011101100100111010011110010110010110111111111101100000010101111001101010010010010110011001111100111001110111001101011010111001100111111101011000100110111010011010110000111000111100110000110011000001110100110101100111010011110011101101"));
	}

}